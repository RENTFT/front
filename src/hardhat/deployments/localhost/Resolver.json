{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pt",
          "type": "uint8"
        }
      ],
      "name": "getPaymentToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pt",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_v",
          "type": "address"
        }
      ],
      "name": "setPaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ffebc55336c5ff586af3d778b9f3dacda74722b2f92893d4f662d2cc9c9e2a8",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "203998",
    "logsBloom": "0x
    "blockHash": "0x572319dc16a81ddbcf888f0016dc75cbd8b30d92cbb4d76b7db70af8e5a1d95c",
    "transactionHash": "0x4ffebc55336c5ff586af3d778b9f3dacda74722b2f92893d4f662d2cc9c9e2a8",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "203998",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"],
  "solcInputHash": "5d969c56c4d1e7416be3e76860066bc7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pt\",\"type\":\"uint8\"}],\"name\":\"getPaymentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pt\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_v\",\"type\":\"address\"}],\"name\":\"setPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPaymentToken(uint8)\":{\"details\":\"util function to avoid guessing getter name if addresses was public\"},\"setPaymentToken(uint8,address)\":{\"details\":\"Gives us the ability to set new payment tokens down the line\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Resolver.sol\":\"Resolver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/Resolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\nimport \\\"./interfaces/IResolver.sol\\\";\\n\\ncontract Resolver is IResolver {\\n    address private admin;\\n    mapping(uint8 => address) private addresses;\\n\\n    constructor(address _admin) {\\n        admin = _admin;\\n    }\\n\\n    function getPaymentToken(uint8 _pt) external view override returns (address) {\\n        return addresses[_pt];\\n    }\\n\\n    function setPaymentToken(uint8 _pt, address _v) external override {\\n        require(_pt != 0, \\\"\\\");\\n        require(addresses[_pt] == address(0), \\\"cannot reset the address\\\");\\n        require(msg.sender == admin, \\\"\\\");\\n\\n        addresses[_pt] = _v;\\n    }\\n}\\n\",\"keccak256\":\"0x298fd6835c96191f758cea32439f6adad859d6560375dc5a9b584cceeac63f10\",\"license\":\"MIT\"},\"src/interfaces/IResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\ninterface IResolver {\\n    enum PaymentToken {\\n        ETH, // 0\\n        WETH, // 1\\n        DAI, // 2\\n        USDC, // 3\\n        USDT, // 4\\n        TUSD // 5\\n    }\\n\\n    /**\\n     * @dev util function to avoid guessing getter name if addresses was public\\n     */\\n    function getPaymentToken(uint8 _pt) external view returns (address);\\n\\n    /**\\n     * @dev Gives us the ability to set new payment tokens down the line\\n     */\\n    function setPaymentToken(uint8 _pt, address _v) external;\\n}\\n\",\"keccak256\":\"0xcddb63901a64ce8439f1461a758af1fe28c36eff80ee9cfb9d5e49b0c740c502\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516102da3803806102da83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b610249806100916000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063321c6aea1461003b578063c6ee427f14610050575b600080fd5b61004e6100493660046101d2565b61007f565b005b61006361005e3660046101b1565b61017e565b6040516001600160a01b03909116815260200160405180910390f35b60ff82166100ae5760405162461bcd60e51b815260206004820152600060248201526044015b60405180910390fd5b60ff82166000908152600160205260409020546001600160a01b0316156101175760405162461bcd60e51b815260206004820152601860248201527f63616e6e6f74207265736574207468652061646472657373000000000000000060448201526064016100a5565b6000546001600160a01b0316331461014b5760405162461bcd60e51b815260206004820152600060248201526044016100a5565b60ff91909116600090815260016020526040902080546001600160a01b0319166001600160a01b03909216919091179055565b60ff81166000908152600160205260409020546001600160a01b03165b919050565b803560ff8116811461019b57600080fd5b6000602082840312156101c2578081fd5b6101cb826101a0565b9392505050565b600080604083850312156101e4578081fd5b6101ed836101a0565b915060208301356001600160a01b0381168114610208578182fd5b80915050925092905056fea2646970667358221220f5c0b2b8cab3b8216d31a95680e46c01fa94919e970d05cb4d5ef2817433205d64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063321c6aea1461003b578063c6ee427f14610050575b600080fd5b61004e6100493660046101d2565b61007f565b005b61006361005e3660046101b1565b61017e565b6040516001600160a01b03909116815260200160405180910390f35b60ff82166100ae5760405162461bcd60e51b815260206004820152600060248201526044015b60405180910390fd5b60ff82166000908152600160205260409020546001600160a01b0316156101175760405162461bcd60e51b815260206004820152601860248201527f63616e6e6f74207265736574207468652061646472657373000000000000000060448201526064016100a5565b6000546001600160a01b0316331461014b5760405162461bcd60e51b815260206004820152600060248201526044016100a5565b60ff91909116600090815260016020526040902080546001600160a01b0319166001600160a01b03909216919091179055565b60ff81166000908152600160205260409020546001600160a01b03165b919050565b803560ff8116811461019b57600080fd5b6000602082840312156101c2578081fd5b6101cb826101a0565b9392505050565b600080604083850312156101e4578081fd5b6101ed836101a0565b915060208301356001600160a01b0381168114610208578182fd5b80915050925092905056fea2646970667358221220f5c0b2b8cab3b8216d31a95680e46c01fa94919e970d05cb4d5ef2817433205d64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPaymentToken(uint8)": {
        "details": "util function to avoid guessing getter name if addresses was public"
      },
      "setPaymentToken(uint8,address)": {
        "details": "Gives us the ability to set new payment tokens down the line"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5399,
        "contract": "src/Resolver.sol:Resolver",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5403,
        "contract": "src/Resolver.sol:Resolver",
        "label": "addresses",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint8,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint8,t_address)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
