{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lendingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "claimedAt",
          "type": "uint32"
        }
      ],
      "name": "CollateralClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lendingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "stoppedAt",
          "type": "uint32"
        }
      ],
      "name": "LendingStopped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lendingId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lenderAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "maxRentDuration",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "dailyRentPrice",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "nftPrice",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isERC721",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "enum IResolver.PaymentToken",
          "name": "paymentToken",
          "type": "uint8"
        }
      ],
      "name": "Lent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lendingId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "renterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "rentDuration",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isERC721",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "rentedAt",
          "type": "uint32"
        }
      ],
      "name": "Rented",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lendingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "renterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "returnedAt",
          "type": "uint32"
        }
      ],
      "name": "Returned",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_nft",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_id",
          "type": "uint256[]"
        }
      ],
      "name": "claimCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_nft",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "uint16[]",
          "name": "_maxRentDuration",
          "type": "uint16[]"
        },
        {
          "internalType": "bytes4[]",
          "name": "_dailyRentPrice",
          "type": "bytes4[]"
        },
        {
          "internalType": "bytes4[]",
          "name": "_nftPrice",
          "type": "bytes4[]"
        },
        {
          "internalType": "enum IResolver.PaymentToken[]",
          "name": "_paymentToken",
          "type": "uint8[]"
        }
      ],
      "name": "lend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_nft",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_id",
          "type": "uint256[]"
        },
        {
          "internalType": "uint16[]",
          "name": "_rentDuration",
          "type": "uint16[]"
        }
      ],
      "name": "rent",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rentFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_nft",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_id",
          "type": "uint256[]"
        }
      ],
      "name": "returnIt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_newBeneficiary",
          "type": "address"
        }
      ],
      "name": "setBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rentFee",
          "type": "uint256"
        }
      ],
      "name": "setRentFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_nft",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_id",
          "type": "uint256[]"
        }
      ],
      "name": "stopLending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xcc76cd652df00a8c9e83f0d1e98d777d3fb2c3a0fe27050ede6710e41dc2cf03",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "3236699",
    "logsBloom": "0x
    "blockHash": "0x78fb302b35e636ef127b7b9c3d3ccf7298a7fc8d5c5bb49bc144a8980977ea6a",
    "transactionHash": "0xcc76cd652df00a8c9e83f0d1e98d777d3fb2c3a0fe27050ede6710e41dc2cf03",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "3236699",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "solcInputHash": "5d969c56c4d1e7416be3e76860066bc7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lendingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"claimedAt\",\"type\":\"uint32\"}],\"name\":\"CollateralClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lendingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"stoppedAt\",\"type\":\"uint32\"}],\"name\":\"LendingStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lendingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lenderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"maxRentDuration\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"dailyRentPrice\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"nftPrice\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"enum IResolver.PaymentToken\",\"name\":\"paymentToken\",\"type\":\"uint8\"}],\"name\":\"Lent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lendingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"renterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"rentDuration\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"rentedAt\",\"type\":\"uint32\"}],\"name\":\"Rented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lendingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"renterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"returnedAt\",\"type\":\"uint32\"}],\"name\":\"Returned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nft\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_id\",\"type\":\"uint256[]\"}],\"name\":\"claimCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nft\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_maxRentDuration\",\"type\":\"uint16[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"_dailyRentPrice\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"_nftPrice\",\"type\":\"bytes4[]\"},{\"internalType\":\"enum IResolver.PaymentToken[]\",\"name\":\"_paymentToken\",\"type\":\"uint8[]\"}],\"name\":\"lend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nft\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_id\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_rentDuration\",\"type\":\"uint16[]\"}],\"name\":\"rent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nft\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_id\",\"type\":\"uint256[]\"}],\"name\":\"returnIt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newBeneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rentFee\",\"type\":\"uint256\"}],\"name\":\"setRentFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nft\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_id\",\"type\":\"uint256[]\"}],\"name\":\"stopLending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimCollateral(address[],uint256[],uint256[])\":{\"details\":\"claim collateral on rentals that are past their due date\"},\"lend(address[],uint256[],uint16[],bytes4[],bytes4[],uint8[])\":{\"details\":\"lend will send your NFT to ReNft contract, it acts as an escrow contract between the lender and the renter\"},\"returnIt(address[],uint256[],uint256[])\":{\"details\":\"renters call this to return the rented NFT before the deadline. If they fail to do so, they will lose the posted collateral\"},\"stopLending(address[],uint256[],uint256[])\":{\"details\":\"stop lending releases the NFT from our escrow and sends it back to you\"},\"supportsInterface(bytes4)\":{\"details\":\"supports the following interfaces: IERC721Receiver, IERC1155Receiver\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"rent(address[],uint256[],uint256[],uint16[])\":{\"notice\":\"domain:  any set of non-repeating NFTs (if repeating, you will incur unnecessary cost)  any set of sorted in ascending order, respective tokenIds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ReNFT.sol\":\"ReNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x249bc2a6d919da5f5145950664134cfcf2f66874bda801fd3b8fb861783da079\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0xc7aa8a96aaeb7e1672a3d5fd37582136ff46b6a6cafabcc40ec0e00a42915e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/ReNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IResolver.sol\\\";\\nimport \\\"./interfaces/IReNFT.sol\\\";\\n\\n// - TODO: erc1155 amounts not supported in this version\\n// adding the amounts, would imply that lending struct would\\n// become two single storage slots, since it only has 4 bits\\n// of free space.\\ncontract ReNFT is IReNft, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    IResolver private resolver;\\n    address private admin;\\n    address payable private beneficiary;\\n    uint256 private lendingId = 1;\\n\\n    uint256 public rentFee = 500;\\n    bytes4 private constant ERC20_DECIMALS_SELECTOR = bytes4(keccak256(bytes(\\\"decimals()\\\")));\\n\\n    // single storage slot: address - 160 bits, 176, 208, 240, 248\\n    struct Lending {\\n        address payable lenderAddress;\\n        uint16 maxRentDuration;\\n        bytes4 dailyRentPrice;\\n        bytes4 nftPrice;\\n        IResolver.PaymentToken paymentToken;\\n    }\\n\\n    // single storage slot: 160 bits, 176, 198\\n    struct Renting {\\n        address payable renterAddress;\\n        uint16 rentDuration;\\n        uint32 rentedAt;\\n    }\\n\\n    struct LendingRenting {\\n        Lending lending;\\n        Renting renting;\\n    }\\n\\n    // 32 bytes key to 64 bytes struct\\n    mapping(bytes32 => LendingRenting) private lendingRenting;\\n\\n    constructor(\\n        address _resolver,\\n        address payable _beneficiary,\\n        address _admin\\n    ) {\\n        resolver = IResolver(_resolver);\\n        beneficiary = _beneficiary;\\n        admin = _admin;\\n    }\\n\\n    // Lightly brainy section ahead\\n    // ----\\n    // So here is a random joke from the Internet before you venture out\\n    // into split or double-split or gazillion-times-split screen to read\\n    // all the contracts and piece it all together (because I am bad\\n    // at remembering, or coming up with jokes)\\n    // Here comes the joke:\\n    // You don't need a parachute to go skydiving.\\n    // You need a parachute to go skydiving twice.\\n    // ----\\n\\n    function lend(\\n        address[] memory _nft,\\n        uint256[] memory _tokenId,\\n        uint16[] memory _maxRentDuration,\\n        bytes4[] memory _dailyRentPrice,\\n        bytes4[] memory _nftPrice,\\n        IResolver.PaymentToken[] memory _paymentToken\\n    ) external override nonReentrant {\\n        require(_nft.length == _tokenId.length, \\\"_nft.length != _tokenId.length\\\");\\n        require(_tokenId.length == _maxRentDuration.length, \\\"_tokenId.length != _maxRentDuration.length\\\");\\n        require(_maxRentDuration.length == _dailyRentPrice.length, \\\"_maxRentDuration.length != _dailyRentPrice.length\\\");\\n        require(_nftPrice.length == _paymentToken.length, \\\"_nftPrice.length != _paymentToken.length\\\");\\n\\n        for (uint256 i = 0; i < _nft.length; i++) {\\n            require(_maxRentDuration[i] > 0, \\\"must be at least one day lend\\\");\\n            require(_maxRentDuration[i] <= 1825, \\\"must be less than five years\\\");\\n\\n            _safeTransfer(msg.sender, address(this), _nft[i], _tokenId[i]);\\n\\n            bytes32 itemHash = keccak256(abi.encodePacked(_nft[i], _tokenId[i], lendingId));\\n            LendingRenting storage item = lendingRenting[itemHash];\\n\\n            item.lending = Lending({\\n                lenderAddress: payable(msg.sender),\\n                maxRentDuration: _maxRentDuration[i],\\n                dailyRentPrice: _dailyRentPrice[i],\\n                nftPrice: _nftPrice[i],\\n                paymentToken: _paymentToken[i]\\n            });\\n\\n            bool isERC721 = false;\\n            {\\n                isERC721 = _isERC721(_nft[i]);\\n            }\\n\\n            emit Lent(\\n                _nft[i],\\n                _tokenId[i],\\n                lendingId,\\n                msg.sender,\\n                _maxRentDuration[i],\\n                _dailyRentPrice[i],\\n                _nftPrice[i],\\n                isERC721,\\n                _paymentToken[i]\\n            );\\n\\n            lendingId++;\\n        }\\n    }\\n\\n    /**\\n     * domain:\\n     *  any set of non-repeating NFTs (if repeating, you will incur unnecessary cost)\\n     *  any set of sorted in ascending order, respective tokenIds\\n     */\\n    function rent(\\n        address[] memory _nft,\\n        uint256[] memory _tokenId,\\n        uint256[] memory _id,\\n        uint16[] memory _rentDuration\\n    ) external payable override nonReentrant {\\n        require(_nft.length == _tokenId.length, \\\"_nft.length != _tokenId.length\\\");\\n        require(_tokenId.length == _id.length, \\\"_tokenId.length != _id.length\\\");\\n        require(_id.length == _rentDuration.length, \\\"_id.length != _rentDuration.length\\\");\\n\\n        uint256 ethPmtRequired = 0;\\n        uint256 nftLen = _nft.length - 1;\\n\\n        for (uint256 i = 0; i < _nft.length; i++) {\\n            address nft = _nft[i];\\n            uint256 tokenId = _tokenId[i];\\n            lendingId = _id[i];\\n            LendingRenting storage item = lendingRenting[keccak256(abi.encodePacked(nft, tokenId, lendingId))];\\n\\n            _ensureIsNull(item.renting);\\n            require(msg.sender != item.lending.lenderAddress, \\\"cant rent own nft\\\");\\n\\n            uint16 rentDuration = _rentDuration[i];\\n            require(rentDuration > 0, \\\"should rent for at least a day\\\");\\n            require(rentDuration <= item.lending.maxRentDuration, \\\"max rent duration exceeded\\\");\\n\\n            uint8 paymentTokenIndex = uint8(item.lending.paymentToken);\\n            address paymentToken = resolver.getPaymentToken(paymentTokenIndex);\\n            bool isERC20 = paymentTokenIndex > 1;\\n\\n            uint256 decimals = 18;\\n            if (isERC20) {\\n                decimals = _decimals(paymentToken);\\n            }\\n\\n            {\\n                uint256 scale = 10**decimals;\\n                // max is 1825 * 65535. Nowhere near the overflow\\n                uint256 rentPrice = rentDuration * _unpackPrice(item.lending.dailyRentPrice, scale);\\n                uint256 nftPrice = _unpackPrice(item.lending.nftPrice, scale);\\n                require(rentPrice > 0, \\\"rent price is zero\\\");\\n                uint256 upfrontPayment = rentPrice + nftPrice;\\n                if (isERC20) {\\n                    IERC20(paymentToken).safeTransferFrom(msg.sender, address(this), upfrontPayment);\\n                } else {\\n                    ethPmtRequired += upfrontPayment;\\n                }\\n            }\\n\\n            if (i == nftLen) {\\n                require(msg.value == ethPmtRequired, \\\"insufficient amount\\\");\\n            }\\n\\n            item.renting.renterAddress = payable(msg.sender);\\n            item.renting.rentDuration = rentDuration;\\n            item.renting.rentedAt = uint32(block.timestamp);\\n\\n            _safeTransfer(address(this), msg.sender, nft, tokenId);\\n\\n            emit Rented(nft, tokenId, lendingId, msg.sender, rentDuration, _isERC721(nft), uint32(block.timestamp));\\n        }\\n    }\\n\\n    function _takeFee(uint256 _rent, IResolver.PaymentToken _paymentToken) private returns (uint256 fee) {\\n        fee = _rent * rentFee;\\n        fee /= 10000; // percentages\\n        uint8 paymentTokenIx = uint8(_paymentToken);\\n\\n        if (paymentTokenIx > 1) {\\n            IERC20 paymentToken = IERC20(resolver.getPaymentToken(paymentTokenIx));\\n            paymentToken.safeTransfer(beneficiary, fee);\\n        } else {\\n            beneficiary.transfer(fee);\\n        }\\n    }\\n\\n    /**\\n     * @dev send rent amounts to lender, send unused\\n     * rent amonuts to renter. Send the collateral\\n     * back to renter. Fee is only ever charged on\\n     * used rent payments. Initially, it will be set at zero.\\n     * Gets called only when the NFT is returned.\\n     * _takeFee is here and in distributeClaimPayments.\\n     *\\n     * @param _lendingRenting when you return the NFT,\\n     * you will have provided the lendingId, with it,\\n     * as well as, nft address and token id, you can\\n     * uniquely identify an NFT on reNFT.\\n     * @param _secondsSinceRentStart seconds since rent\\n     * start\\n     */\\n    function _distributePayments(LendingRenting storage _lendingRenting, uint256 _secondsSinceRentStart) private {\\n        uint256 decimals = 18;\\n        uint8 paymentTokenIx = uint8(_lendingRenting.lending.paymentToken);\\n        address paymentToken = resolver.getPaymentToken(paymentTokenIx);\\n        bool isERC20 = paymentTokenIx > 1;\\n\\n        if (isERC20) {\\n            decimals = _decimals(paymentToken);\\n        }\\n\\n        uint256 scale = 10**decimals;\\n        uint256 nftPrice = _unpackPrice(_lendingRenting.lending.nftPrice, scale);\\n        uint256 rentPrice = _unpackPrice(_lendingRenting.lending.dailyRentPrice, scale);\\n        uint256 renterPayment = rentPrice * _lendingRenting.renting.rentDuration;\\n        uint256 sendLenderAmt = (_secondsSinceRentStart * rentPrice) / 86400;\\n\\n        require(renterPayment >= sendLenderAmt, \\\"lender receiving more than renter pmt\\\");\\n\\n        uint256 sendRenterAmt = renterPayment - sendLenderAmt;\\n\\n        require(renterPayment > sendRenterAmt, \\\"underflow issues prevention\\\");\\n\\n        uint256 takenFee = _takeFee(sendLenderAmt, _lendingRenting.lending.paymentToken);\\n        sendRenterAmt += nftPrice;\\n\\n        if (isERC20) {\\n            IERC20(paymentToken).safeTransfer(_lendingRenting.lending.lenderAddress, sendLenderAmt - takenFee);\\n            IERC20(paymentToken).safeTransfer(_lendingRenting.renting.renterAddress, sendRenterAmt);\\n        } else {\\n            require(paymentTokenIx == 1, \\\"sentinels dont pay\\\");\\n\\n            _lendingRenting.lending.lenderAddress.transfer(sendLenderAmt - takenFee);\\n            _lendingRenting.renting.renterAddress.transfer(sendRenterAmt);\\n        }\\n    }\\n\\n    function _distributeClaimPayment(LendingRenting memory _lendingRenting) private {\\n        uint256 decimals = 18;\\n        uint8 paymentTokenIx = uint8(_lendingRenting.lending.paymentToken);\\n        IERC20 paymentToken = IERC20(resolver.getPaymentToken(paymentTokenIx));\\n\\n        bool isERC20 = paymentTokenIx > 1;\\n\\n        if (isERC20) {\\n            decimals = _decimals(address(paymentToken));\\n        }\\n\\n        uint256 scale = 10**decimals;\\n        uint256 nftPrice = _unpackPrice(_lendingRenting.lending.nftPrice, scale);\\n        uint256 rentPrice = _unpackPrice(_lendingRenting.lending.dailyRentPrice, scale);\\n        uint256 maxRentPayment = rentPrice * _lendingRenting.renting.rentDuration;\\n        uint256 takenFee = _takeFee(maxRentPayment, IResolver.PaymentToken(paymentTokenIx));\\n        uint256 finalAmt = maxRentPayment + nftPrice;\\n\\n        if (isERC20) {\\n            paymentToken.safeTransfer(_lendingRenting.lending.lenderAddress, finalAmt - takenFee);\\n        } else {\\n            _lendingRenting.lending.lenderAddress.transfer(finalAmt - takenFee);\\n        }\\n    }\\n\\n    function returnIt(\\n        address[] memory _nft,\\n        uint256[] memory _tokenId,\\n        uint256[] memory _id\\n    ) public override nonReentrant {\\n        for (uint256 i = 0; i < _nft.length; i++) {\\n            LendingRenting storage item = lendingRenting[keccak256(abi.encodePacked(_nft[i], _tokenId[i], _id[i]))];\\n\\n            require(item.renting.renterAddress == msg.sender, \\\"not renter\\\");\\n\\n            uint256 blockTimestamp = block.timestamp;\\n            bool isPastReturn = _isPastReturnDate(item.renting, blockTimestamp);\\n            require(!isPastReturn, \\\"is past return date\\\");\\n\\n            uint256 secondsSinceRentStart = blockTimestamp - item.renting.rentedAt;\\n\\n            _safeTransfer(msg.sender, address(this), _nft[i], _tokenId[i]);\\n\\n            _distributePayments(item, secondsSinceRentStart);\\n\\n            emit Returned(_nft[i], _tokenId[i], _id[i], msg.sender, uint32(block.timestamp));\\n\\n            delete item.renting;\\n        }\\n    }\\n\\n    function claimCollateral(\\n        address[] memory _nft,\\n        uint256[] memory _tokenId,\\n        uint256[] memory _id\\n    ) public override nonReentrant {\\n        for (uint256 i = 0; i < _nft.length; i++) {\\n            LendingRenting storage item = lendingRenting[keccak256(abi.encodePacked(_nft[i], _tokenId[i], _id[i]))];\\n\\n            require(_isPastReturnDate(item.renting, block.timestamp), \\\"cant claim yet\\\");\\n            _ensureIsNotNull(item.lending);\\n            _ensureIsNotNull(item.renting);\\n            _distributeClaimPayment(item);\\n\\n            delete item.lending;\\n            delete item.renting;\\n\\n            emit CollateralClaimed(_nft[i], _tokenId[i], _id[i], uint32(block.timestamp));\\n        }\\n    }\\n\\n    function stopLending(\\n        address[] memory _nft,\\n        uint256[] memory _tokenId,\\n        uint256[] memory _id\\n    ) public override nonReentrant {\\n        for (uint256 i = 0; i < _nft.length; i++) {\\n            LendingRenting storage item = lendingRenting[keccak256(abi.encodePacked(_nft[i], _tokenId[i], _id[i]))];\\n\\n            _ensureIsNull(item.renting);\\n\\n            require(item.lending.lenderAddress == msg.sender, \\\"only lender allowed\\\");\\n\\n            _safeTransfer(address(this), msg.sender, _nft[i], _tokenId[i]);\\n\\n            delete item.lending;\\n\\n            emit LendingStopped(_nft[i], _tokenId[i], _id[i], uint32(block.timestamp));\\n        }\\n    }\\n\\n    /**\\n     * @dev determines what nft standrad we are dealing with\\n     */\\n    function _safeTransfer(\\n        address _from,\\n        address _to,\\n        address _nft,\\n        uint256 _tokenId\\n    ) private {\\n        bool isERC721 = _isERC721(_nft);\\n        bool isERC1155 = _isERC1155(_nft);\\n\\n        if (isERC721) {\\n            IERC721(_nft).transferFrom(_from, _to, _tokenId);\\n        } else if (isERC1155) {\\n            // TODO: change the amount\\n            IERC1155(_nft).safeTransferFrom(_from, _to, _tokenId, 1, \\\"\\\");\\n        } else {\\n            revert(\\\"unsupported _from\\\");\\n        }\\n    }\\n\\n    // We can handle erc1155s\\n    // ----\\n    // \\u2508\\u2571\\u2571\\u258f\\u2508\\u2508\\u2571\\u2571\\u2571\\u2571\\u258f\\u2571\\u2571\\u258f\\u2508\\u2508\\u2508\\n    // \\u2508\\u2587\\u2571\\u258f\\u2508\\u2508\\u2587\\u2587\\u2587\\u2571\\u258f\\u2587\\u2571\\u258f\\u2508\\u2508\\u2508\\n    // \\u2508\\u2587\\u2571\\u258f\\u2581\\u2508\\u2587\\u2571\\u2587\\u2571\\u258f\\u2587\\u2571\\u258f\\u2581\\u2508\\u2508\\n    // \\u2508\\u2587\\u2571\\u2571\\u2571\\u258f\\u2587\\u2571\\u2587\\u2571\\u258f\\u2587\\u2571\\u2571\\u2571\\u258f\\u2508\\n    // \\u2508\\u2587\\u2587\\u2587\\u2571\\u2508\\u2587\\u2587\\u2587\\u2571\\u2508\\u2587\\u2587\\u2587\\u2571\\u2508\\u2508\\n    // and jokes, too\\n    // ----\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        // 0xf0b9e5ba === `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`\\n        // 0xf0b9e5ba === `ERC721Receiver(0).onERC721Received.selector`\\n        return 0xf0b9e5ba;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        // bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        return 0xbc197c81;\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        // bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\")) = 0xf23a6e61\\n        return 0xf23a6e61;\\n    }\\n\\n    /**\\n     * @dev supports the following interfaces: IERC721Receiver, IERC1155Receiver\\n     */\\n    function supportsInterface(bytes4 interfaceId) external pure override returns (bool) {\\n        return\\n            (interfaceId == type(IERC721Receiver).interfaceId) || (interfaceId == type(IERC1155Receiver).interfaceId);\\n    }\\n\\n    // Utils\\n    // ----\\n    //\\n    // ___$$$___$$$____\\n    // __$$$$$_$$$$$___\\n    // __$$$$$$$$$$$___\\n    // ____$$$$$$$_____\\n    // ______$$$_______\\n    // _______$\\n    // _____\\u00b8.\\u2022\\u00b4\\u00b8.\\u2022*\\u00b8.\\u2022*\\u00b4\\u00a8`*\\u2022.\\u2665\\n    // _____*.\\u00b8\\u00b8.\\u2022*\\u00a8`\\n    //\\n    // ----\\n\\n    function _isERC721(address _nft) internal view returns (bool) {\\n        return IERC165(_nft).supportsInterface(type(IERC721).interfaceId);\\n    }\\n\\n    function _isERC1155(address _nft) internal view returns (bool) {\\n        return IERC165(_nft).supportsInterface(type(IERC1155).interfaceId);\\n    }\\n\\n    /**\\n     * @dev this was added to maintain single storage slot for lending\\n     *\\n     * @param _price packed price, 8 hex chars\\n     * @param _scale if 18 decimal places, then pass 1000000000000000000\\n     */\\n    function _unpackPrice(bytes4 _price, uint256 _scale) internal pure returns (uint256) {\\n        uint16 whole = uint16(bytes2(_price));\\n        uint16 decimal = uint16(bytes2(_price << 16));\\n        uint256 decimalScale = _scale / 10000;\\n        if (whole > 9999) {\\n            whole = 9999;\\n        }\\n        uint256 w = whole * _scale;\\n        if (decimal > 9999) {\\n            decimal = 9999;\\n        }\\n        uint256 d = decimal * decimalScale;\\n        uint256 price = w + d;\\n        require(price >= w, \\\"invalid price\\\");\\n        if (price == 0) {\\n            price = decimalScale;\\n        }\\n        return price;\\n    }\\n\\n    /**\\n     * @dev ERC20 does not specify a decimals function, and so expecting it to be there is incorrect\\n     * Our price packing implementation, however, requires us to know what this number is,\\n     * since it affects our arithmetic. This is imposed by the constrain of a single storage\\n     * slot lend.\\n     *\\n     * Notice that a DAO / delegated multi-sig will be controlling the Resolver, that implies that\\n     * unless maliciously overtaken, we will be in control of the payment tokens that we are adding.\\n     * As such, this function is an extra security measure, as well as a generalised way to get\\n     * decimals off ERC20.\\n     *\\n     *  @param _tokenAddress ERC20 token address for which to attempt to pull decimals\\n     */\\n    function _decimals(address _tokenAddress) internal returns (uint256) {\\n        (bool success, bytes memory data) = _tokenAddress.call(abi.encodeWithSelector(ERC20_DECIMALS_SELECTOR));\\n        require(success, \\\"invalid decimals call\\\");\\n        uint256 decimals = abi.decode(data, (uint256));\\n        require(decimals > 0, \\\"decimals cant be zero\\\");\\n        return decimals;\\n    }\\n\\n    // Sanity checks section\\n    // ----\\n    //   __\\n    //  /  |           /\\n    // (___| ___  ___ (___  ___  ___  ___\\n    // |    |   )|   )|    |___)|    |\\n    // |    |    |__/ |__  |__  |__  |__\\n    // ----\\n\\n    function _ensureIsNotNull(Lending memory _lending) private pure {\\n        require(_lending.lenderAddress != address(0), \\\"lender is zero address\\\");\\n        require(_lending.maxRentDuration != 0, \\\"max rent duration is zero\\\");\\n        require(_lending.dailyRentPrice != 0, \\\"daily rent price is zero\\\");\\n        require(_lending.nftPrice != 0, \\\"nft price is zero\\\");\\n    }\\n\\n    function _ensureIsNotNull(Renting memory _renting) private pure {\\n        require(_renting.renterAddress != address(0), \\\"renter address is zero address\\\");\\n        require(_renting.rentDuration != 0, \\\"rent duration is zero\\\");\\n        require(_renting.rentedAt != 0, \\\"never rented\\\");\\n    }\\n\\n    function _ensureIsNull(Renting memory _renting) private pure {\\n        require(_renting.renterAddress == address(0), \\\"renter address is not zero address\\\");\\n        require(_renting.rentDuration == 0, \\\"rent duration is not zero\\\");\\n        require(_renting.rentedAt == 0, \\\"is rented\\\");\\n    }\\n\\n    function _isPastReturnDate(Renting memory _renting, uint256 _now) private pure returns (bool) {\\n        return _now - _renting.rentedAt > _renting.rentDuration * 86400;\\n    }\\n\\n    // Admin only section\\n    // ----\\n    //   __\\n    //  /  |    |      /                     /\\n    // (___| ___| _ _    ___       ___  ___ (\\n    // |   )|   )| | )| |   )     |   )|   )| \\\\   )\\n    // |  / |__/ |  / | |  /      |__/ |  / |  \\\\_/\\n    // ----                                    /\\n\\n    function setRentFee(uint256 _rentFee) external {\\n        require(msg.sender == admin, \\\"\\\");\\n        require(_rentFee < 10000, \\\"cannot be taking 100 pct fee madlad\\\");\\n        rentFee = _rentFee;\\n    }\\n\\n    function setBeneficiary(address payable _newBeneficiary) external {\\n        require(msg.sender == admin, \\\"\\\");\\n        beneficiary = _newBeneficiary;\\n    }\\n}\\n\",\"keccak256\":\"0xd321a3fd45761cd390b08ba28b299e2129b2f893723544124d12ec503679120d\",\"license\":\"MIT\"},\"src/interfaces/IReNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./IResolver.sol\\\";\\n\\n// TODO: add dev param comments after you change the spec a bit\\ninterface IReNft is IERC721Receiver, IERC1155Receiver {\\n    /// @dev quick test showed that LentBatch with arrays\\n    /// @dev would cost more than the non-array version\\n    /// @dev like the below\\n    event Lent(\\n        address indexed nftAddress,\\n        uint256 indexed tokenId,\\n        uint256 lendingId,\\n        address indexed lenderAddress,\\n        uint16 maxRentDuration,\\n        bytes4 dailyRentPrice,\\n        bytes4 nftPrice,\\n        bool isERC721,\\n        IResolver.PaymentToken paymentToken\\n    );\\n\\n    event Rented(\\n        address indexed nftAddress,\\n        uint256 indexed tokenId,\\n        uint256 lendingId,\\n        address indexed renterAddress,\\n        uint16 rentDuration,\\n        bool isERC721,\\n        uint32 rentedAt\\n    );\\n\\n    event Returned(\\n        address indexed nftAddress,\\n        uint256 indexed tokenId,\\n        uint256 indexed lendingId,\\n        address renterAddress,\\n        uint32 returnedAt\\n    );\\n\\n    event CollateralClaimed(\\n        address indexed nftAddress,\\n        uint256 indexed tokenId,\\n        uint256 indexed lendingId,\\n        uint32 claimedAt\\n    );\\n\\n    event LendingStopped(\\n        address indexed nftAddress,\\n        uint256 indexed tokenId,\\n        uint256 indexed lendingId,\\n        uint32 stoppedAt\\n    );\\n\\n    /**\\n     * @dev lend will send your NFT to ReNft contract, it acts as an escrow\\n     * contract between the lender and the renter\\n     */\\n    function lend(\\n        address[] memory _nft,\\n        uint256[] memory _tokenId,\\n        uint16[] memory _maxRentDuration,\\n        bytes4[] memory _dailyRentPrice,\\n        bytes4[] memory _nftPrice,\\n        IResolver.PaymentToken[] memory _paymentToken\\n    ) external;\\n\\n    /**\\n     * @dev on calling this, renter sends rentDuration * dailyRentPrice\\n     * to cover for the potentially full cost of renting. They also\\n     * must send the collateral - nft price set by the lender\\n     */\\n    function rent(\\n        address[] memory _nft,\\n        uint256[] memory _tokenId,\\n        uint256[] memory _id,\\n        uint16[] memory _rentDuration\\n    ) external payable;\\n\\n    /**\\n     * @dev renters call this to return the rented NFT before the\\n     * deadline. If they fail to do so, they will lose the posted\\n     * collateral\\n     */\\n    function returnIt(\\n        address[] memory _nft,\\n        uint256[] memory _tokenId,\\n        uint256[] memory _id\\n    ) external;\\n\\n    /**\\n     * @dev claim collateral on rentals that are past their due date\\n     */\\n    function claimCollateral(\\n        address[] memory _nft,\\n        uint256[] memory _tokenId,\\n        uint256[] memory _id\\n    ) external;\\n\\n    /**\\n     * @dev stop lending releases the NFT from our escrow and sends it back\\n     * to you\\n     */\\n    function stopLending(\\n        address[] memory _nft,\\n        uint256[] memory _tokenId,\\n        uint256[] memory _id\\n    ) external;\\n}\\n\",\"keccak256\":\"0x701dccd61e8a469dc4836737f1ad686f1e3ff4d356a93ee1a483370634ab9ef6\",\"license\":\"MIT\"},\"src/interfaces/IResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\ninterface IResolver {\\n    enum PaymentToken {\\n        ETH, // 0\\n        WETH, // 1\\n        DAI, // 2\\n        USDC, // 3\\n        USDT, // 4\\n        TUSD // 5\\n    }\\n\\n    /**\\n     * @dev util function to avoid guessing getter name if addresses was public\\n     */\\n    function getPaymentToken(uint8 _pt) external view returns (address);\\n\\n    /**\\n     * @dev Gives us the ability to set new payment tokens down the line\\n     */\\n    function setPaymentToken(uint8 _pt, address _v) external;\\n}\\n\",\"keccak256\":\"0xcddb63901a64ce8439f1461a758af1fe28c36eff80ee9cfb9d5e49b0c740c502\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260016004556101f46005553480156200001c57600080fd5b506040516200381e3803806200381e8339810160408190526200003f9162000087565b6001600081905580546001600160a01b039485166001600160a01b031991821617909155600380549385169382169390931790925560028054919093169116179055620000f3565b6000806000606084860312156200009c578283fd5b8351620000a981620000da565b6020850151909350620000bc81620000da565b6040850151909250620000cf81620000da565b809150509250925092565b6001600160a01b0381168114620000f057600080fd5b50565b61371b80620001036000396000f3fe6080604052600436106100a75760003560e01c806376774ea31161006457806376774ea3146101a8578063bc197c81146101c8578063bf2b23ea146101f7578063dc6b1f911461021b578063f23a6e611461022e578063fb1585191461025b576100a7565b806301ffc9a7146100ac578063098130df146100e1578063150b7a02146101035780631c31f71014610148578063486b378b1461016857806359fe66e414610188575b600080fd5b3480156100b857600080fd5b506100cc6100c736600461330a565b61027b565b60405190151581526020015b60405180910390f35b3480156100ed57600080fd5b506101016100fc3660046131be565b6102b4565b005b34801561010f57600080fd5b5061012f61011e366004612fe5565b63785cf2dd60e11b95945050505050565b6040516001600160e01b031990911681526020016100d8565b34801561015457600080fd5b50610101610163366004612f0e565b61058f565b34801561017457600080fd5b506101016101833660046130d0565b6105e5565b34801561019457600080fd5b506101016101a33660046131be565b610cc8565b3480156101b457600080fd5b506101016101c3366004613324565b611134565b3480156101d457600080fd5b5061012f6101e3366004612f2a565b63bc197c8160e01b98975050505050505050565b34801561020357600080fd5b5061020d60055481565b6040519081526020016100d8565b610101610229366004613242565b6111ca565b34801561023a57600080fd5b5061012f610249366004613056565b63f23a6e6160e01b9695505050505050565b34801561026757600080fd5b506101016102763660046131be565b611829565b60006001600160e01b03198216630a85bd0160e11b14806102ac57506001600160e01b03198216630271189760e51b145b90505b919050565b600260005414156102e05760405162461bcd60e51b81526004016102d7906133cd565b60405180910390fd5b600260009081555b83518110156105845760006006600086848151811061031757634e487b7160e01b600052603260045260246000fd5b602002602001015186858151811061033f57634e487b7160e01b600052603260045260246000fd5b602002602001015186868151811061036757634e487b7160e01b600052603260045260246000fd5b602002602001015160405160200161038193929190613354565b60408051808303601f190181529181528151602092830120835282820193909352908201600020825160608101845260018201546001600160a01b0381168252600160a01b810461ffff1693820193909352600160b01b90920463ffffffff16928201929092529091506103f490611b64565b80546001600160a01b031633146104435760405162461bcd60e51b81526020600482015260136024820152721bdb9b1e481b195b99195c88185b1b1bddd959606a1b60448201526064016102d7565b61049d303387858151811061046857634e487b7160e01b600052603260045260246000fd5b602002602001015187868151811061049057634e487b7160e01b600052603260045260246000fd5b6020026020010151611c64565b80546001600160f81b031916815582518390839081106104cd57634e487b7160e01b600052603260045260246000fd5b60200260200101518483815181106104f557634e487b7160e01b600052603260045260246000fd5b602002602001015186848151811061051d57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03167f8d66e30e8e86dc4affaf59a67cb9877f2935b867994fd273f9e7826dc99d82ef42604051610569919063ffffffff91909116815260200190565b60405180910390a4508061057c81613689565b9150506102e8565b505060016000555050565b6002546001600160a01b031633146105c35760405162461bcd60e51b815260206004820152600060248201526044016102d7565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600260005414156106085760405162461bcd60e51b81526004016102d7906133cd565b6002600055845186511461065e5760405162461bcd60e51b815260206004820152601e60248201527f5f6e66742e6c656e67746820213d205f746f6b656e49642e6c656e677468000060448201526064016102d7565b83518551146106c25760405162461bcd60e51b815260206004820152602a60248201527f5f746f6b656e49642e6c656e67746820213d205f6d617852656e7444757261746044820152690d2dedc5cd8cadccee8d60b31b60648201526084016102d7565b825184511461072d5760405162461bcd60e51b815260206004820152603160248201527f5f6d617852656e744475726174696f6e2e6c656e67746820213d205f6461696c6044820152700f2a4cadce8a0e4d2c6ca5cd8cadccee8d607b1b60648201526084016102d7565b805182511461078f5760405162461bcd60e51b815260206004820152602860248201527f5f6e667450726963652e6c656e67746820213d205f7061796d656e74546f6b656044820152670dc5cd8cadccee8d60c31b60648201526084016102d7565b60005b8651811015610cba5760008582815181106107bd57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff16116108165760405162461bcd60e51b815260206004820152601d60248201527f6d757374206265206174206c65617374206f6e6520646179206c656e6400000060448201526064016102d7565b61072185828151811061083957634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1611156108935760405162461bcd60e51b815260206004820152601c60248201527f6d757374206265206c657373207468616e20666976652079656172730000000060448201526064016102d7565b6108e033308984815181106108b857634e487b7160e01b600052603260045260246000fd5b602002602001015189858151811061049057634e487b7160e01b600052603260045260246000fd5b600087828151811061090257634e487b7160e01b600052603260045260246000fd5b602002602001015187838151811061092a57634e487b7160e01b600052603260045260246000fd5b602002602001015160045460405160200161094793929190613354565b60408051601f19818403018152828252805160209182012060008181526006835283902060a085019093523384528951909450919291908201908990869081106109a157634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1681526020018785815181106109d257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160e01b0319168152602001868581518110610a0957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160e01b0319168152602001858581518110610a4057634e487b7160e01b600052603260045260246000fd5b60200260200101516005811115610a6757634e487b7160e01b600052602160045260246000fd5b9052805182546020830151604084015160608501516001600160a01b039094166001600160b01b031990931692909217600160a01b61ffff909216919091021767ffffffffffffffff60b01b1916600160b01b60e092831c0263ffffffff60d01b191617600160d01b9290911c919091021780835560808201518391829060ff60f01b1916600160f01b836005811115610b1157634e487b7160e01b600052602160045260246000fd5b02179055509050506000610b4b8a8581518110610b3e57634e487b7160e01b600052603260045260246000fd5b6020026020010151611d90565b9050336001600160a01b0316898581518110610b7757634e487b7160e01b600052603260045260246000fd5b60200260200101518b8681518110610b9f57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03167f14c21cee422166536e4f3e13b107364f12cb409c18c56dadc682c0e79dc798a26004548c8981518110610bf457634e487b7160e01b600052603260045260246000fd5b60200260200101518c8a81518110610c1c57634e487b7160e01b600052603260045260246000fd5b60200260200101518c8b81518110610c4457634e487b7160e01b600052603260045260246000fd5b6020026020010151888d8d81518110610c6d57634e487b7160e01b600052603260045260246000fd5b6020026020010151604051610c8796959493929190613404565b60405180910390a460048054906000610c9f83613689565b91905055505050508080610cb290613689565b915050610792565b505060016000555050505050565b60026000541415610ceb5760405162461bcd60e51b81526004016102d7906133cd565b600260009081555b835181101561058457600060066000868481518110610d2257634e487b7160e01b600052603260045260246000fd5b6020026020010151868581518110610d4a57634e487b7160e01b600052603260045260246000fd5b6020026020010151868681518110610d7257634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001610d8c93929190613354565b60408051808303601f190181529181528151602092830120835282820193909352908201600020825160608101845260018201546001600160a01b0381168252600160a01b810461ffff1693820193909352600160b01b90920463ffffffff1692820192909252909150610e009042611e12565b610e3d5760405162461bcd60e51b815260206004820152600e60248201526d18d85b9d0818db185a5b481e595d60921b60448201526064016102d7565b6040805160a08101825282546001600160a01b0381168252600160a01b810461ffff166020830152600160b01b810460e090811b6001600160e01b031990811694840194909452600160d01b8204901b9092166060820152610ef09183906080830190600160f01b900460ff166005811115610ec957634e487b7160e01b600052602160045260246000fd5b6005811115610ee857634e487b7160e01b600052602160045260246000fd5b905250611e4e565b6040805160608101825260018301546001600160a01b0381168252600160a01b810461ffff166020830152600160b01b900463ffffffff1691810191909152610f3890611f9d565b6040805160e0808201835283546001600160a01b03811693830193845261ffff600160a01b82041660608401526001600160e01b0319600160b01b8204831b81166080850152600160d01b820490921b90911660a083015261103b928491839190839060c084019060ff600160f01b909104166005811115610fca57634e487b7160e01b600052602160045260246000fd5b6005811115610fe957634e487b7160e01b600052602160045260246000fd5b905250815260408051606081018252600193909301546001600160a01b0381168452600160a01b810461ffff16602080860191909152600160b01b90910463ffffffff16918401919091520152612087565b80546001600160f81b03191681556001810180546001600160d01b0319169055825183908390811061107d57634e487b7160e01b600052603260045260246000fd5b60200260200101518483815181106110a557634e487b7160e01b600052603260045260246000fd5b60200260200101518684815181106110cd57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03167f05aa5bfe8585cc13e8621c71274852eaa27e35b96473184ca96990fe6a38b80942604051611119919063ffffffff91909116815260200190565b60405180910390a4508061112c81613689565b915050610cf3565b6002546001600160a01b031633146111685760405162461bcd60e51b815260206004820152600060248201526044016102d7565b61271081106111c55760405162461bcd60e51b815260206004820152602360248201527f63616e6e6f742062652074616b696e67203130302070637420666565206d61646044820152621b185960ea1b60648201526084016102d7565b600555565b600260005414156111ed5760405162461bcd60e51b81526004016102d7906133cd565b600260005582518451146112435760405162461bcd60e51b815260206004820152601e60248201527f5f6e66742e6c656e67746820213d205f746f6b656e49642e6c656e677468000060448201526064016102d7565b81518351146112945760405162461bcd60e51b815260206004820152601d60248201527f5f746f6b656e49642e6c656e67746820213d205f69642e6c656e67746800000060448201526064016102d7565b80518251146112f05760405162461bcd60e51b815260206004820152602260248201527f5f69642e6c656e67746820213d205f72656e744475726174696f6e2e6c656e676044820152610e8d60f31b60648201526084016102d7565b600080600186516113019190613646565b905060005b8651811015610cba57600087828151811061133157634e487b7160e01b600052603260045260246000fd5b60200260200101519050600087838151811061135d57634e487b7160e01b600052603260045260246000fd5b6020026020010151905086838151811061138757634e487b7160e01b600052603260045260246000fd5b602002602001015160048190555060006006600084846004546040516020016113b293929190613354565b60408051808303601f190181529181528151602092830120835282820193909352908201600020825160608101845260018201546001600160a01b0381168252600160a01b810461ffff1693820193909352600160b01b90920463ffffffff169282019290925290915061142590611b64565b80546001600160a01b03163314156114735760405162461bcd60e51b815260206004820152601160248201527018d85b9d081c995b9d081bdddb881b999d607a1b60448201526064016102d7565b600087858151811061149557634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008161ffff16116114f35760405162461bcd60e51b815260206004820152601e60248201527f73686f756c642072656e7420666f72206174206c65617374206120646179000060448201526064016102d7565b815461ffff600160a01b909104811690821611156115535760405162461bcd60e51b815260206004820152601a60248201527f6d61782072656e74206475726174696f6e20657863656564656400000000000060448201526064016102d7565b8154600090600160f01b900460ff16600581111561158157634e487b7160e01b600052602160045260246000fd5b60015460405163c6ee427f60e01b815260ff831660048201529192506000916001600160a01b039091169063c6ee427f9060240160206040518083038186803b1580156115cd57600080fd5b505afa1580156115e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116059190612ef2565b9050600160ff831611601281156116225761161f83612263565b90505b600061162f82600a613537565b875490915060009061164b90600160b01b900460e01b836123bb565b6116599061ffff8916613627565b885490915060009061167590600160d01b900460e01b846123bb565b9050600082116116bc5760405162461bcd60e51b815260206004820152601260248201527172656e74207072696365206973207a65726f60701b60448201526064016102d7565b60006116c882846134b9565b905085156116ea576116e56001600160a01b038816333084612488565b6116f9565b808f6116f691906134b9565b9e505b505050508989141561174a578a341461174a5760405162461bcd60e51b81526020600482015260136024820152721a5b9cdd59999a58da595b9d08185b5bdd5b9d606a1b60448201526064016102d7565b6001860180546001600160b01b0319163361ffff60a01b19811691909117600160a01b61ffff8916021763ffffffff60b01b1916600160b01b4263ffffffff16021790915561179c9030908a8a611c64565b336001600160a01b031687896001600160a01b03167f547e8111cedf57ba3e86fad269da48ef07a08a21dedc71efe0665c7dcba7ff6e600454896117df8e611d90565b6040805193845261ffff909216602084015215159082015263ffffffff4216606082015260800160405180910390a45050505050505050808061182190613689565b915050611306565b6002600054141561184c5760405162461bcd60e51b81526004016102d7906133cd565b600260009081555b83518110156105845760006006600086848151811061188357634e487b7160e01b600052603260045260246000fd5b60200260200101518685815181106118ab57634e487b7160e01b600052603260045260246000fd5b60200260200101518686815181106118d357634e487b7160e01b600052603260045260246000fd5b60200260200101516040516020016118ed93929190613354565b60408051601f1981840301815291815281516020928301208352908201929092520160002060018101549091506001600160a01b0316331461195e5760405162461bcd60e51b815260206004820152600a6024820152693737ba103932b73a32b960b11b60448201526064016102d7565b6040805160608101825260018301546001600160a01b0381168252600160a01b810461ffff166020830152600160b01b900463ffffffff169181019190915242906000906119ac9083611e12565b905080156119f25760405162461bcd60e51b8152602060048201526013602482015272697320706173742072657475726e206461746560681b60448201526064016102d7565b6001830154600090611a1190600160b01b900463ffffffff1684613646565b9050611a6033308a8881518110611a3857634e487b7160e01b600052603260045260246000fd5b60200260200101518a898151811061049057634e487b7160e01b600052603260045260246000fd5b611a6a84826124f9565b858581518110611a8a57634e487b7160e01b600052603260045260246000fd5b6020026020010151878681518110611ab257634e487b7160e01b600052603260045260246000fd5b6020026020010151898781518110611ada57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03167fc2e5648ce895a76d6488be25b8cd6e98aab7b4a4bf183b1baea76ee09da6917d3342604051611b369291906001600160a01b0392909216825263ffffffff16602082015260400190565b60405180910390a450505060010180546001600160d01b031916905580611b5c81613689565b915050611854565b80516001600160a01b031615611bc75760405162461bcd60e51b815260206004820152602260248201527f72656e7465722061646472657373206973206e6f74207a65726f206164647265604482015261737360f01b60648201526084016102d7565b602081015161ffff1615611c1d5760405162461bcd60e51b815260206004820152601960248201527f72656e74206475726174696f6e206973206e6f74207a65726f0000000000000060448201526064016102d7565b604081015163ffffffff1615611c615760405162461bcd60e51b81526020600482015260096024820152681a5cc81c995b9d195960ba1b60448201526064016102d7565b50565b6000611c6f83611d90565b90506000611c7c84612856565b90508115611cf4576040516323b872dd60e01b81526001600160a01b0387811660048301528681166024830152604482018590528516906323b872dd906064015b600060405180830381600087803b158015611cd757600080fd5b505af1158015611ceb573d6000803e3d6000fd5b50505050611d88565b8015611d4c57604051637921219560e11b81526001600160a01b0387811660048301528681166024830152604482018590526001606483015260a06084830152600060a483015285169063f242432a9060c401611cbd565b60405162461bcd60e51b8152602060048201526011602482015270756e737570706f72746564205f66726f6d60781b60448201526064016102d7565b505050505050565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526000906001600160a01b038316906301ffc9a7906024015b60206040518083038186803b158015611dda57600080fd5b505afa158015611dee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ac91906132ea565b6000826020015161ffff1662015180611e2b9190613605565b62ffffff16836040015163ffffffff1683611e469190613646565b119392505050565b80516001600160a01b0316611e9e5760405162461bcd60e51b81526020600482015260166024820152756c656e646572206973207a65726f206164647265737360501b60448201526064016102d7565b602081015161ffff16611ef35760405162461bcd60e51b815260206004820152601960248201527f6d61782072656e74206475726174696f6e206973207a65726f0000000000000060448201526064016102d7565b60408101516001600160e01b031916611f4e5760405162461bcd60e51b815260206004820152601860248201527f6461696c792072656e74207072696365206973207a65726f000000000000000060448201526064016102d7565b60608101516001600160e01b031916611c615760405162461bcd60e51b81526020600482015260116024820152706e6674207072696365206973207a65726f60781b60448201526064016102d7565b80516001600160a01b0316611ff45760405162461bcd60e51b815260206004820152601e60248201527f72656e7465722061646472657373206973207a65726f2061646472657373000060448201526064016102d7565b602081015161ffff166120415760405162461bcd60e51b815260206004820152601560248201527472656e74206475726174696f6e206973207a65726f60581b60448201526064016102d7565b604081015163ffffffff16611c615760405162461bcd60e51b815260206004820152600c60248201526b1b995d995c881c995b9d195960a21b60448201526064016102d7565b80516080015160129060009060058111156120b257634e487b7160e01b600052602160045260246000fd5b60015460405163c6ee427f60e01b815260ff831660048201529192506000916001600160a01b039091169063c6ee427f9060240160206040518083038186803b1580156120fe57600080fd5b505afa158015612112573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121369190612ef2565b9050600160ff83161180156121515761214e82612263565b93505b600061215e85600a613537565b90506000612174876000015160600151836123bb565b9050600061218a886000015160400151846123bb565b9050600088602001516020015161ffff16826121a69190613627565b905060006121d6828960ff1660058111156121d157634e487b7160e01b600052602160045260246000fd5b61288c565b905060006121e485846134b9565b90508615612213578a515161220e906121fd8484613646565b6001600160a01b038b1691906129c1565b612256565b8a51516001600160a01b03166108fc61222c8484613646565b6040518115909202916000818181858888f19350505050158015612254573d6000803e3d6000fd5b505b5050505050505050505050565b604080518082018252600a815269646563696d616c73282960b01b60209182015281516004815260248101835290810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b038616916122c7919061337e565b6000604051808303816000865af19150503d8060008114612304576040519150601f19603f3d011682016040523d82523d6000602084013e612309565b606091505b5091509150816123535760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a5908191958da5b585b1cc818d85b1b605a1b60448201526064016102d7565b600081806020019051810190612369919061333c565b9050600081116123b35760405162461bcd60e51b8152602060048201526015602482015274646563696d616c732063616e74206265207a65726f60581b60448201526064016102d7565b949350505050565b600060f083901c61ffff60e085901c16826123d8612710866134d1565b905061270f8361ffff1611156123ee5761270f92505b60006123fe8661ffff8616613627565b905061270f8361ffff1611156124145761270f92505b60006124248361ffff8616613627565b9050600061243282846134b9565b9050828110156124745760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b60448201526064016102d7565b8061247c5750825b98975050505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526124f39085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526129f6565b50505050565b8154601290600090600160f01b900460ff16600581111561252a57634e487b7160e01b600052602160045260246000fd5b60015460405163c6ee427f60e01b815260ff831660048201529192506000916001600160a01b039091169063c6ee427f9060240160206040518083038186803b15801561257657600080fd5b505afa15801561258a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ae9190612ef2565b9050600160ff83161180156125c9576125c682612263565b93505b60006125d685600a613537565b87549091506000906125f290600160d01b900460e01b836123bb565b885490915060009061260e90600160b01b900460e01b846123bb565b60018a015490915060009061262e90600160a01b900461ffff1683613627565b9050600062015180612640848c613627565b61264a91906134d1565b9050808210156126aa5760405162461bcd60e51b815260206004820152602560248201527f6c656e64657220726563656976696e67206d6f7265207468616e2072656e74656044820152641c881c1b5d60da1b60648201526084016102d7565b60006126b68284613646565b90508083116127075760405162461bcd60e51b815260206004820152601b60248201527f756e646572666c6f77206973737565732070726576656e74696f6e000000000060448201526064016102d7565b8b54600090612721908490600160f01b900460ff1661288c565b905061272d86836134b9565b91508715612780578c5461275f906001600160a01b031661274e8386613646565b6001600160a01b038c1691906129c1565b60018d015461277b906001600160a01b038b81169116846129c1565b612847565b8960ff166001146127c85760405162461bcd60e51b815260206004820152601260248201527173656e74696e656c7320646f6e742070617960701b60448201526064016102d7565b8c546001600160a01b03166108fc6127e08386613646565b6040518115909202916000818181858888f19350505050158015612808573d6000803e3d6000fd5b5060018d01546040516001600160a01b039091169083156108fc029084906000818181858888f19350505050158015612845573d6000803e3d6000fd5b505b50505050505050505050505050565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526000906001600160a01b038316906301ffc9a790602401611dc2565b60006005548361289c9190613627565b90506128aa612710826134d1565b905060008260058111156128ce57634e487b7160e01b600052602160045260246000fd5b905060018160ff16111561297e5760015460405163c6ee427f60e01b815260ff831660048201526000916001600160a01b03169063c6ee427f9060240160206040518083038186803b15801561292357600080fd5b505afa158015612937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295b9190612ef2565b600354909150612978906001600160a01b038084169116856129c1565b506129ba565b6003546040516001600160a01b039091169083156108fc029084906000818181858888f193505050501580156129b8573d6000803e3d6000fd5b505b5092915050565b6040516001600160a01b0383166024820152604481018290526129f190849063a9059cbb60e01b906064016124bc565b505050565b6000612a4b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ac89092919063ffffffff16565b8051909150156129f15780806020019051810190612a6991906132ea565b6129f15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102d7565b6060612ad78484600085612ae1565b90505b9392505050565b606082471015612b425760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102d7565b843b612b905760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102d7565b600080866001600160a01b03168587604051612bac919061337e565b60006040518083038185875af1925050503d8060008114612be9576040519150601f19603f3d011682016040523d82523d6000602084013e612bee565b606091505b5091509150612bfe828286612c09565b979650505050505050565b60608315612c18575081612ada565b825115612c285782518084602001fd5b8160405162461bcd60e51b81526004016102d7919061339a565b600082601f830112612c52578081fd5b81356020612c67612c6283613495565b613464565b80838252828201915082860187848660051b8901011115612c86578586fd5b855b85811015612cad578135612c9b816136d0565b84529284019290840190600101612c88565b5090979650505050505050565b600082601f830112612cca578081fd5b81356020612cda612c6283613495565b80838252828201915082860187848660051b8901011115612cf9578586fd5b855b85811015612cad57612d0c82612e9a565b84529284019290840190600101612cfb565b600082601f830112612d2e578081fd5b81356020612d3e612c6283613495565b80838252828201915082860187848660051b8901011115612d5d578586fd5b855b85811015612cad57813560068110612d75578788fd5b84529284019290840190600101612d5f565b600082601f830112612d97578081fd5b81356020612da7612c6283613495565b80838252828201915082860187848660051b8901011115612dc6578586fd5b855b85811015612cad57813561ffff81168114612de1578788fd5b84529284019290840190600101612dc8565b60008083601f840112612e04578182fd5b50813567ffffffffffffffff811115612e1b578182fd5b6020830191508360208260051b8501011115612e3657600080fd5b9250929050565b600082601f830112612e4d578081fd5b81356020612e5d612c6283613495565b80838252828201915082860187848660051b8901011115612e7c578586fd5b855b85811015612cad57813584529284019290840190600101612e7e565b80356001600160e01b0319811681146102af57600080fd5b60008083601f840112612ec3578182fd5b50813567ffffffffffffffff811115612eda578182fd5b602083019150836020828501011115612e3657600080fd5b600060208284031215612f03578081fd5b8151612ada816136d0565b600060208284031215612f1f578081fd5b8135612ada816136d0565b60008060008060008060008060a0898b031215612f45578384fd5b8835612f50816136d0565b97506020890135612f60816136d0565b9650604089013567ffffffffffffffff80821115612f7c578586fd5b612f888c838d01612df3565b909850965060608b0135915080821115612fa0578586fd5b612fac8c838d01612df3565b909650945060808b0135915080821115612fc4578384fd5b50612fd18b828c01612eb2565b999c989b5096995094979396929594505050565b600080600080600060808688031215612ffc578283fd5b8535613007816136d0565b94506020860135613017816136d0565b935060408601359250606086013567ffffffffffffffff811115613039578182fd5b61304588828901612eb2565b969995985093965092949392505050565b60008060008060008060a0878903121561306e578384fd5b8635613079816136d0565b95506020870135613089816136d0565b94506040870135935060608701359250608087013567ffffffffffffffff8111156130b2578283fd5b6130be89828a01612eb2565b979a9699509497509295939492505050565b60008060008060008060c087890312156130e8578384fd5b863567ffffffffffffffff808211156130ff578586fd5b61310b8a838b01612c42565b97506020890135915080821115613120578586fd5b61312c8a838b01612e3d565b96506040890135915080821115613141578586fd5b61314d8a838b01612d87565b95506060890135915080821115613162578384fd5b61316e8a838b01612cba565b94506080890135915080821115613183578384fd5b61318f8a838b01612cba565b935060a08901359150808211156131a4578283fd5b506131b189828a01612d1e565b9150509295509295509295565b6000806000606084860312156131d2578081fd5b833567ffffffffffffffff808211156131e9578283fd5b6131f587838801612c42565b9450602086013591508082111561320a578283fd5b61321687838801612e3d565b9350604086013591508082111561322b578283fd5b5061323886828701612e3d565b9150509250925092565b60008060008060808587031215613257578182fd5b843567ffffffffffffffff8082111561326e578384fd5b61327a88838901612c42565b9550602087013591508082111561328f578384fd5b61329b88838901612e3d565b945060408701359150808211156132b0578384fd5b6132bc88838901612e3d565b935060608701359150808211156132d1578283fd5b506132de87828801612d87565b91505092959194509250565b6000602082840312156132fb578081fd5b81518015158114612ada578182fd5b60006020828403121561331b578081fd5b612ada82612e9a565b600060208284031215613335578081fd5b5035919050565b60006020828403121561334d578081fd5b5051919050565b60609390931b6bffffffffffffffffffffffff191683526014830191909152603482015260540190565b6000825161339081846020870161365d565b9190910192915050565b60006020825282518060208401526133b981604085016020870161365d565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b86815261ffff861660208201526001600160e01b0319858116604083015284166060820152821515608082015260c081016006831061345357634e487b7160e01b600052602160045260246000fd5b8260a0830152979650505050505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561348d5761348d6136ba565b604052919050565b600067ffffffffffffffff8211156134af576134af6136ba565b5060051b60200190565b600082198211156134cc576134cc6136a4565b500190565b6000826134ec57634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611613503575061352e565b818704821115613515576135156136a4565b8086161561352257918102915b9490941c9380026134f4565b94509492505050565b6000612ada600019848460008261355057506001612ada565b8161355d57506000612ada565b8160018114613573576002811461357d576135aa565b6001915050612ada565b60ff84111561358e5761358e6136a4565b6001841b9150848211156135a4576135a46136a4565b50612ada565b5060208310610133831016604e8410600b84101617156135dd575081810a838111156135d8576135d86136a4565b612ada565b6135ea84848460016134f1565b8086048211156135fc576135fc6136a4565b02949350505050565b600062ffffff808316818516818304811182151516156135fc576135fc6136a4565b6000816000190483118215151615613641576136416136a4565b500290565b600082821015613658576136586136a4565b500390565b60005b83811015613678578181015183820152602001613660565b838111156124f35750506000910152565b600060001982141561369d5761369d6136a4565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611c6157600080fdfea26469706673582212208c4df450f51114768b48e466bb253db51654d2d9b085dcf4c5b24c730c23016464736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c806376774ea31161006457806376774ea3146101a8578063bc197c81146101c8578063bf2b23ea146101f7578063dc6b1f911461021b578063f23a6e611461022e578063fb1585191461025b576100a7565b806301ffc9a7146100ac578063098130df146100e1578063150b7a02146101035780631c31f71014610148578063486b378b1461016857806359fe66e414610188575b600080fd5b3480156100b857600080fd5b506100cc6100c736600461330a565b61027b565b60405190151581526020015b60405180910390f35b3480156100ed57600080fd5b506101016100fc3660046131be565b6102b4565b005b34801561010f57600080fd5b5061012f61011e366004612fe5565b63785cf2dd60e11b95945050505050565b6040516001600160e01b031990911681526020016100d8565b34801561015457600080fd5b50610101610163366004612f0e565b61058f565b34801561017457600080fd5b506101016101833660046130d0565b6105e5565b34801561019457600080fd5b506101016101a33660046131be565b610cc8565b3480156101b457600080fd5b506101016101c3366004613324565b611134565b3480156101d457600080fd5b5061012f6101e3366004612f2a565b63bc197c8160e01b98975050505050505050565b34801561020357600080fd5b5061020d60055481565b6040519081526020016100d8565b610101610229366004613242565b6111ca565b34801561023a57600080fd5b5061012f610249366004613056565b63f23a6e6160e01b9695505050505050565b34801561026757600080fd5b506101016102763660046131be565b611829565b60006001600160e01b03198216630a85bd0160e11b14806102ac57506001600160e01b03198216630271189760e51b145b90505b919050565b600260005414156102e05760405162461bcd60e51b81526004016102d7906133cd565b60405180910390fd5b600260009081555b83518110156105845760006006600086848151811061031757634e487b7160e01b600052603260045260246000fd5b602002602001015186858151811061033f57634e487b7160e01b600052603260045260246000fd5b602002602001015186868151811061036757634e487b7160e01b600052603260045260246000fd5b602002602001015160405160200161038193929190613354565b60408051808303601f190181529181528151602092830120835282820193909352908201600020825160608101845260018201546001600160a01b0381168252600160a01b810461ffff1693820193909352600160b01b90920463ffffffff16928201929092529091506103f490611b64565b80546001600160a01b031633146104435760405162461bcd60e51b81526020600482015260136024820152721bdb9b1e481b195b99195c88185b1b1bddd959606a1b60448201526064016102d7565b61049d303387858151811061046857634e487b7160e01b600052603260045260246000fd5b602002602001015187868151811061049057634e487b7160e01b600052603260045260246000fd5b6020026020010151611c64565b80546001600160f81b031916815582518390839081106104cd57634e487b7160e01b600052603260045260246000fd5b60200260200101518483815181106104f557634e487b7160e01b600052603260045260246000fd5b602002602001015186848151811061051d57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03167f8d66e30e8e86dc4affaf59a67cb9877f2935b867994fd273f9e7826dc99d82ef42604051610569919063ffffffff91909116815260200190565b60405180910390a4508061057c81613689565b9150506102e8565b505060016000555050565b6002546001600160a01b031633146105c35760405162461bcd60e51b815260206004820152600060248201526044016102d7565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600260005414156106085760405162461bcd60e51b81526004016102d7906133cd565b6002600055845186511461065e5760405162461bcd60e51b815260206004820152601e60248201527f5f6e66742e6c656e67746820213d205f746f6b656e49642e6c656e677468000060448201526064016102d7565b83518551146106c25760405162461bcd60e51b815260206004820152602a60248201527f5f746f6b656e49642e6c656e67746820213d205f6d617852656e7444757261746044820152690d2dedc5cd8cadccee8d60b31b60648201526084016102d7565b825184511461072d5760405162461bcd60e51b815260206004820152603160248201527f5f6d617852656e744475726174696f6e2e6c656e67746820213d205f6461696c6044820152700f2a4cadce8a0e4d2c6ca5cd8cadccee8d607b1b60648201526084016102d7565b805182511461078f5760405162461bcd60e51b815260206004820152602860248201527f5f6e667450726963652e6c656e67746820213d205f7061796d656e74546f6b656044820152670dc5cd8cadccee8d60c31b60648201526084016102d7565b60005b8651811015610cba5760008582815181106107bd57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff16116108165760405162461bcd60e51b815260206004820152601d60248201527f6d757374206265206174206c65617374206f6e6520646179206c656e6400000060448201526064016102d7565b61072185828151811061083957634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1611156108935760405162461bcd60e51b815260206004820152601c60248201527f6d757374206265206c657373207468616e20666976652079656172730000000060448201526064016102d7565b6108e033308984815181106108b857634e487b7160e01b600052603260045260246000fd5b602002602001015189858151811061049057634e487b7160e01b600052603260045260246000fd5b600087828151811061090257634e487b7160e01b600052603260045260246000fd5b602002602001015187838151811061092a57634e487b7160e01b600052603260045260246000fd5b602002602001015160045460405160200161094793929190613354565b60408051601f19818403018152828252805160209182012060008181526006835283902060a085019093523384528951909450919291908201908990869081106109a157634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1681526020018785815181106109d257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160e01b0319168152602001868581518110610a0957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160e01b0319168152602001858581518110610a4057634e487b7160e01b600052603260045260246000fd5b60200260200101516005811115610a6757634e487b7160e01b600052602160045260246000fd5b9052805182546020830151604084015160608501516001600160a01b039094166001600160b01b031990931692909217600160a01b61ffff909216919091021767ffffffffffffffff60b01b1916600160b01b60e092831c0263ffffffff60d01b191617600160d01b9290911c919091021780835560808201518391829060ff60f01b1916600160f01b836005811115610b1157634e487b7160e01b600052602160045260246000fd5b02179055509050506000610b4b8a8581518110610b3e57634e487b7160e01b600052603260045260246000fd5b6020026020010151611d90565b9050336001600160a01b0316898581518110610b7757634e487b7160e01b600052603260045260246000fd5b60200260200101518b8681518110610b9f57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03167f14c21cee422166536e4f3e13b107364f12cb409c18c56dadc682c0e79dc798a26004548c8981518110610bf457634e487b7160e01b600052603260045260246000fd5b60200260200101518c8a81518110610c1c57634e487b7160e01b600052603260045260246000fd5b60200260200101518c8b81518110610c4457634e487b7160e01b600052603260045260246000fd5b6020026020010151888d8d81518110610c6d57634e487b7160e01b600052603260045260246000fd5b6020026020010151604051610c8796959493929190613404565b60405180910390a460048054906000610c9f83613689565b91905055505050508080610cb290613689565b915050610792565b505060016000555050505050565b60026000541415610ceb5760405162461bcd60e51b81526004016102d7906133cd565b600260009081555b835181101561058457600060066000868481518110610d2257634e487b7160e01b600052603260045260246000fd5b6020026020010151868581518110610d4a57634e487b7160e01b600052603260045260246000fd5b6020026020010151868681518110610d7257634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001610d8c93929190613354565b60408051808303601f190181529181528151602092830120835282820193909352908201600020825160608101845260018201546001600160a01b0381168252600160a01b810461ffff1693820193909352600160b01b90920463ffffffff1692820192909252909150610e009042611e12565b610e3d5760405162461bcd60e51b815260206004820152600e60248201526d18d85b9d0818db185a5b481e595d60921b60448201526064016102d7565b6040805160a08101825282546001600160a01b0381168252600160a01b810461ffff166020830152600160b01b810460e090811b6001600160e01b031990811694840194909452600160d01b8204901b9092166060820152610ef09183906080830190600160f01b900460ff166005811115610ec957634e487b7160e01b600052602160045260246000fd5b6005811115610ee857634e487b7160e01b600052602160045260246000fd5b905250611e4e565b6040805160608101825260018301546001600160a01b0381168252600160a01b810461ffff166020830152600160b01b900463ffffffff1691810191909152610f3890611f9d565b6040805160e0808201835283546001600160a01b03811693830193845261ffff600160a01b82041660608401526001600160e01b0319600160b01b8204831b81166080850152600160d01b820490921b90911660a083015261103b928491839190839060c084019060ff600160f01b909104166005811115610fca57634e487b7160e01b600052602160045260246000fd5b6005811115610fe957634e487b7160e01b600052602160045260246000fd5b905250815260408051606081018252600193909301546001600160a01b0381168452600160a01b810461ffff16602080860191909152600160b01b90910463ffffffff16918401919091520152612087565b80546001600160f81b03191681556001810180546001600160d01b0319169055825183908390811061107d57634e487b7160e01b600052603260045260246000fd5b60200260200101518483815181106110a557634e487b7160e01b600052603260045260246000fd5b60200260200101518684815181106110cd57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03167f05aa5bfe8585cc13e8621c71274852eaa27e35b96473184ca96990fe6a38b80942604051611119919063ffffffff91909116815260200190565b60405180910390a4508061112c81613689565b915050610cf3565b6002546001600160a01b031633146111685760405162461bcd60e51b815260206004820152600060248201526044016102d7565b61271081106111c55760405162461bcd60e51b815260206004820152602360248201527f63616e6e6f742062652074616b696e67203130302070637420666565206d61646044820152621b185960ea1b60648201526084016102d7565b600555565b600260005414156111ed5760405162461bcd60e51b81526004016102d7906133cd565b600260005582518451146112435760405162461bcd60e51b815260206004820152601e60248201527f5f6e66742e6c656e67746820213d205f746f6b656e49642e6c656e677468000060448201526064016102d7565b81518351146112945760405162461bcd60e51b815260206004820152601d60248201527f5f746f6b656e49642e6c656e67746820213d205f69642e6c656e67746800000060448201526064016102d7565b80518251146112f05760405162461bcd60e51b815260206004820152602260248201527f5f69642e6c656e67746820213d205f72656e744475726174696f6e2e6c656e676044820152610e8d60f31b60648201526084016102d7565b600080600186516113019190613646565b905060005b8651811015610cba57600087828151811061133157634e487b7160e01b600052603260045260246000fd5b60200260200101519050600087838151811061135d57634e487b7160e01b600052603260045260246000fd5b6020026020010151905086838151811061138757634e487b7160e01b600052603260045260246000fd5b602002602001015160048190555060006006600084846004546040516020016113b293929190613354565b60408051808303601f190181529181528151602092830120835282820193909352908201600020825160608101845260018201546001600160a01b0381168252600160a01b810461ffff1693820193909352600160b01b90920463ffffffff169282019290925290915061142590611b64565b80546001600160a01b03163314156114735760405162461bcd60e51b815260206004820152601160248201527018d85b9d081c995b9d081bdddb881b999d607a1b60448201526064016102d7565b600087858151811061149557634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008161ffff16116114f35760405162461bcd60e51b815260206004820152601e60248201527f73686f756c642072656e7420666f72206174206c65617374206120646179000060448201526064016102d7565b815461ffff600160a01b909104811690821611156115535760405162461bcd60e51b815260206004820152601a60248201527f6d61782072656e74206475726174696f6e20657863656564656400000000000060448201526064016102d7565b8154600090600160f01b900460ff16600581111561158157634e487b7160e01b600052602160045260246000fd5b60015460405163c6ee427f60e01b815260ff831660048201529192506000916001600160a01b039091169063c6ee427f9060240160206040518083038186803b1580156115cd57600080fd5b505afa1580156115e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116059190612ef2565b9050600160ff831611601281156116225761161f83612263565b90505b600061162f82600a613537565b875490915060009061164b90600160b01b900460e01b836123bb565b6116599061ffff8916613627565b885490915060009061167590600160d01b900460e01b846123bb565b9050600082116116bc5760405162461bcd60e51b815260206004820152601260248201527172656e74207072696365206973207a65726f60701b60448201526064016102d7565b60006116c882846134b9565b905085156116ea576116e56001600160a01b038816333084612488565b6116f9565b808f6116f691906134b9565b9e505b505050508989141561174a578a341461174a5760405162461bcd60e51b81526020600482015260136024820152721a5b9cdd59999a58da595b9d08185b5bdd5b9d606a1b60448201526064016102d7565b6001860180546001600160b01b0319163361ffff60a01b19811691909117600160a01b61ffff8916021763ffffffff60b01b1916600160b01b4263ffffffff16021790915561179c9030908a8a611c64565b336001600160a01b031687896001600160a01b03167f547e8111cedf57ba3e86fad269da48ef07a08a21dedc71efe0665c7dcba7ff6e600454896117df8e611d90565b6040805193845261ffff909216602084015215159082015263ffffffff4216606082015260800160405180910390a45050505050505050808061182190613689565b915050611306565b6002600054141561184c5760405162461bcd60e51b81526004016102d7906133cd565b600260009081555b83518110156105845760006006600086848151811061188357634e487b7160e01b600052603260045260246000fd5b60200260200101518685815181106118ab57634e487b7160e01b600052603260045260246000fd5b60200260200101518686815181106118d357634e487b7160e01b600052603260045260246000fd5b60200260200101516040516020016118ed93929190613354565b60408051601f1981840301815291815281516020928301208352908201929092520160002060018101549091506001600160a01b0316331461195e5760405162461bcd60e51b815260206004820152600a6024820152693737ba103932b73a32b960b11b60448201526064016102d7565b6040805160608101825260018301546001600160a01b0381168252600160a01b810461ffff166020830152600160b01b900463ffffffff169181019190915242906000906119ac9083611e12565b905080156119f25760405162461bcd60e51b8152602060048201526013602482015272697320706173742072657475726e206461746560681b60448201526064016102d7565b6001830154600090611a1190600160b01b900463ffffffff1684613646565b9050611a6033308a8881518110611a3857634e487b7160e01b600052603260045260246000fd5b60200260200101518a898151811061049057634e487b7160e01b600052603260045260246000fd5b611a6a84826124f9565b858581518110611a8a57634e487b7160e01b600052603260045260246000fd5b6020026020010151878681518110611ab257634e487b7160e01b600052603260045260246000fd5b6020026020010151898781518110611ada57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03167fc2e5648ce895a76d6488be25b8cd6e98aab7b4a4bf183b1baea76ee09da6917d3342604051611b369291906001600160a01b0392909216825263ffffffff16602082015260400190565b60405180910390a450505060010180546001600160d01b031916905580611b5c81613689565b915050611854565b80516001600160a01b031615611bc75760405162461bcd60e51b815260206004820152602260248201527f72656e7465722061646472657373206973206e6f74207a65726f206164647265604482015261737360f01b60648201526084016102d7565b602081015161ffff1615611c1d5760405162461bcd60e51b815260206004820152601960248201527f72656e74206475726174696f6e206973206e6f74207a65726f0000000000000060448201526064016102d7565b604081015163ffffffff1615611c615760405162461bcd60e51b81526020600482015260096024820152681a5cc81c995b9d195960ba1b60448201526064016102d7565b50565b6000611c6f83611d90565b90506000611c7c84612856565b90508115611cf4576040516323b872dd60e01b81526001600160a01b0387811660048301528681166024830152604482018590528516906323b872dd906064015b600060405180830381600087803b158015611cd757600080fd5b505af1158015611ceb573d6000803e3d6000fd5b50505050611d88565b8015611d4c57604051637921219560e11b81526001600160a01b0387811660048301528681166024830152604482018590526001606483015260a06084830152600060a483015285169063f242432a9060c401611cbd565b60405162461bcd60e51b8152602060048201526011602482015270756e737570706f72746564205f66726f6d60781b60448201526064016102d7565b505050505050565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526000906001600160a01b038316906301ffc9a7906024015b60206040518083038186803b158015611dda57600080fd5b505afa158015611dee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ac91906132ea565b6000826020015161ffff1662015180611e2b9190613605565b62ffffff16836040015163ffffffff1683611e469190613646565b119392505050565b80516001600160a01b0316611e9e5760405162461bcd60e51b81526020600482015260166024820152756c656e646572206973207a65726f206164647265737360501b60448201526064016102d7565b602081015161ffff16611ef35760405162461bcd60e51b815260206004820152601960248201527f6d61782072656e74206475726174696f6e206973207a65726f0000000000000060448201526064016102d7565b60408101516001600160e01b031916611f4e5760405162461bcd60e51b815260206004820152601860248201527f6461696c792072656e74207072696365206973207a65726f000000000000000060448201526064016102d7565b60608101516001600160e01b031916611c615760405162461bcd60e51b81526020600482015260116024820152706e6674207072696365206973207a65726f60781b60448201526064016102d7565b80516001600160a01b0316611ff45760405162461bcd60e51b815260206004820152601e60248201527f72656e7465722061646472657373206973207a65726f2061646472657373000060448201526064016102d7565b602081015161ffff166120415760405162461bcd60e51b815260206004820152601560248201527472656e74206475726174696f6e206973207a65726f60581b60448201526064016102d7565b604081015163ffffffff16611c615760405162461bcd60e51b815260206004820152600c60248201526b1b995d995c881c995b9d195960a21b60448201526064016102d7565b80516080015160129060009060058111156120b257634e487b7160e01b600052602160045260246000fd5b60015460405163c6ee427f60e01b815260ff831660048201529192506000916001600160a01b039091169063c6ee427f9060240160206040518083038186803b1580156120fe57600080fd5b505afa158015612112573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121369190612ef2565b9050600160ff83161180156121515761214e82612263565b93505b600061215e85600a613537565b90506000612174876000015160600151836123bb565b9050600061218a886000015160400151846123bb565b9050600088602001516020015161ffff16826121a69190613627565b905060006121d6828960ff1660058111156121d157634e487b7160e01b600052602160045260246000fd5b61288c565b905060006121e485846134b9565b90508615612213578a515161220e906121fd8484613646565b6001600160a01b038b1691906129c1565b612256565b8a51516001600160a01b03166108fc61222c8484613646565b6040518115909202916000818181858888f19350505050158015612254573d6000803e3d6000fd5b505b5050505050505050505050565b604080518082018252600a815269646563696d616c73282960b01b60209182015281516004815260248101835290810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b038616916122c7919061337e565b6000604051808303816000865af19150503d8060008114612304576040519150601f19603f3d011682016040523d82523d6000602084013e612309565b606091505b5091509150816123535760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a5908191958da5b585b1cc818d85b1b605a1b60448201526064016102d7565b600081806020019051810190612369919061333c565b9050600081116123b35760405162461bcd60e51b8152602060048201526015602482015274646563696d616c732063616e74206265207a65726f60581b60448201526064016102d7565b949350505050565b600060f083901c61ffff60e085901c16826123d8612710866134d1565b905061270f8361ffff1611156123ee5761270f92505b60006123fe8661ffff8616613627565b905061270f8361ffff1611156124145761270f92505b60006124248361ffff8616613627565b9050600061243282846134b9565b9050828110156124745760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b60448201526064016102d7565b8061247c5750825b98975050505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526124f39085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526129f6565b50505050565b8154601290600090600160f01b900460ff16600581111561252a57634e487b7160e01b600052602160045260246000fd5b60015460405163c6ee427f60e01b815260ff831660048201529192506000916001600160a01b039091169063c6ee427f9060240160206040518083038186803b15801561257657600080fd5b505afa15801561258a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ae9190612ef2565b9050600160ff83161180156125c9576125c682612263565b93505b60006125d685600a613537565b87549091506000906125f290600160d01b900460e01b836123bb565b885490915060009061260e90600160b01b900460e01b846123bb565b60018a015490915060009061262e90600160a01b900461ffff1683613627565b9050600062015180612640848c613627565b61264a91906134d1565b9050808210156126aa5760405162461bcd60e51b815260206004820152602560248201527f6c656e64657220726563656976696e67206d6f7265207468616e2072656e74656044820152641c881c1b5d60da1b60648201526084016102d7565b60006126b68284613646565b90508083116127075760405162461bcd60e51b815260206004820152601b60248201527f756e646572666c6f77206973737565732070726576656e74696f6e000000000060448201526064016102d7565b8b54600090612721908490600160f01b900460ff1661288c565b905061272d86836134b9565b91508715612780578c5461275f906001600160a01b031661274e8386613646565b6001600160a01b038c1691906129c1565b60018d015461277b906001600160a01b038b81169116846129c1565b612847565b8960ff166001146127c85760405162461bcd60e51b815260206004820152601260248201527173656e74696e656c7320646f6e742070617960701b60448201526064016102d7565b8c546001600160a01b03166108fc6127e08386613646565b6040518115909202916000818181858888f19350505050158015612808573d6000803e3d6000fd5b5060018d01546040516001600160a01b039091169083156108fc029084906000818181858888f19350505050158015612845573d6000803e3d6000fd5b505b50505050505050505050505050565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526000906001600160a01b038316906301ffc9a790602401611dc2565b60006005548361289c9190613627565b90506128aa612710826134d1565b905060008260058111156128ce57634e487b7160e01b600052602160045260246000fd5b905060018160ff16111561297e5760015460405163c6ee427f60e01b815260ff831660048201526000916001600160a01b03169063c6ee427f9060240160206040518083038186803b15801561292357600080fd5b505afa158015612937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295b9190612ef2565b600354909150612978906001600160a01b038084169116856129c1565b506129ba565b6003546040516001600160a01b039091169083156108fc029084906000818181858888f193505050501580156129b8573d6000803e3d6000fd5b505b5092915050565b6040516001600160a01b0383166024820152604481018290526129f190849063a9059cbb60e01b906064016124bc565b505050565b6000612a4b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ac89092919063ffffffff16565b8051909150156129f15780806020019051810190612a6991906132ea565b6129f15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102d7565b6060612ad78484600085612ae1565b90505b9392505050565b606082471015612b425760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102d7565b843b612b905760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102d7565b600080866001600160a01b03168587604051612bac919061337e565b60006040518083038185875af1925050503d8060008114612be9576040519150601f19603f3d011682016040523d82523d6000602084013e612bee565b606091505b5091509150612bfe828286612c09565b979650505050505050565b60608315612c18575081612ada565b825115612c285782518084602001fd5b8160405162461bcd60e51b81526004016102d7919061339a565b600082601f830112612c52578081fd5b81356020612c67612c6283613495565b613464565b80838252828201915082860187848660051b8901011115612c86578586fd5b855b85811015612cad578135612c9b816136d0565b84529284019290840190600101612c88565b5090979650505050505050565b600082601f830112612cca578081fd5b81356020612cda612c6283613495565b80838252828201915082860187848660051b8901011115612cf9578586fd5b855b85811015612cad57612d0c82612e9a565b84529284019290840190600101612cfb565b600082601f830112612d2e578081fd5b81356020612d3e612c6283613495565b80838252828201915082860187848660051b8901011115612d5d578586fd5b855b85811015612cad57813560068110612d75578788fd5b84529284019290840190600101612d5f565b600082601f830112612d97578081fd5b81356020612da7612c6283613495565b80838252828201915082860187848660051b8901011115612dc6578586fd5b855b85811015612cad57813561ffff81168114612de1578788fd5b84529284019290840190600101612dc8565b60008083601f840112612e04578182fd5b50813567ffffffffffffffff811115612e1b578182fd5b6020830191508360208260051b8501011115612e3657600080fd5b9250929050565b600082601f830112612e4d578081fd5b81356020612e5d612c6283613495565b80838252828201915082860187848660051b8901011115612e7c578586fd5b855b85811015612cad57813584529284019290840190600101612e7e565b80356001600160e01b0319811681146102af57600080fd5b60008083601f840112612ec3578182fd5b50813567ffffffffffffffff811115612eda578182fd5b602083019150836020828501011115612e3657600080fd5b600060208284031215612f03578081fd5b8151612ada816136d0565b600060208284031215612f1f578081fd5b8135612ada816136d0565b60008060008060008060008060a0898b031215612f45578384fd5b8835612f50816136d0565b97506020890135612f60816136d0565b9650604089013567ffffffffffffffff80821115612f7c578586fd5b612f888c838d01612df3565b909850965060608b0135915080821115612fa0578586fd5b612fac8c838d01612df3565b909650945060808b0135915080821115612fc4578384fd5b50612fd18b828c01612eb2565b999c989b5096995094979396929594505050565b600080600080600060808688031215612ffc578283fd5b8535613007816136d0565b94506020860135613017816136d0565b935060408601359250606086013567ffffffffffffffff811115613039578182fd5b61304588828901612eb2565b969995985093965092949392505050565b60008060008060008060a0878903121561306e578384fd5b8635613079816136d0565b95506020870135613089816136d0565b94506040870135935060608701359250608087013567ffffffffffffffff8111156130b2578283fd5b6130be89828a01612eb2565b979a9699509497509295939492505050565b60008060008060008060c087890312156130e8578384fd5b863567ffffffffffffffff808211156130ff578586fd5b61310b8a838b01612c42565b97506020890135915080821115613120578586fd5b61312c8a838b01612e3d565b96506040890135915080821115613141578586fd5b61314d8a838b01612d87565b95506060890135915080821115613162578384fd5b61316e8a838b01612cba565b94506080890135915080821115613183578384fd5b61318f8a838b01612cba565b935060a08901359150808211156131a4578283fd5b506131b189828a01612d1e565b9150509295509295509295565b6000806000606084860312156131d2578081fd5b833567ffffffffffffffff808211156131e9578283fd5b6131f587838801612c42565b9450602086013591508082111561320a578283fd5b61321687838801612e3d565b9350604086013591508082111561322b578283fd5b5061323886828701612e3d565b9150509250925092565b60008060008060808587031215613257578182fd5b843567ffffffffffffffff8082111561326e578384fd5b61327a88838901612c42565b9550602087013591508082111561328f578384fd5b61329b88838901612e3d565b945060408701359150808211156132b0578384fd5b6132bc88838901612e3d565b935060608701359150808211156132d1578283fd5b506132de87828801612d87565b91505092959194509250565b6000602082840312156132fb578081fd5b81518015158114612ada578182fd5b60006020828403121561331b578081fd5b612ada82612e9a565b600060208284031215613335578081fd5b5035919050565b60006020828403121561334d578081fd5b5051919050565b60609390931b6bffffffffffffffffffffffff191683526014830191909152603482015260540190565b6000825161339081846020870161365d565b9190910192915050565b60006020825282518060208401526133b981604085016020870161365d565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b86815261ffff861660208201526001600160e01b0319858116604083015284166060820152821515608082015260c081016006831061345357634e487b7160e01b600052602160045260246000fd5b8260a0830152979650505050505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561348d5761348d6136ba565b604052919050565b600067ffffffffffffffff8211156134af576134af6136ba565b5060051b60200190565b600082198211156134cc576134cc6136a4565b500190565b6000826134ec57634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611613503575061352e565b818704821115613515576135156136a4565b8086161561352257918102915b9490941c9380026134f4565b94509492505050565b6000612ada600019848460008261355057506001612ada565b8161355d57506000612ada565b8160018114613573576002811461357d576135aa565b6001915050612ada565b60ff84111561358e5761358e6136a4565b6001841b9150848211156135a4576135a46136a4565b50612ada565b5060208310610133831016604e8410600b84101617156135dd575081810a838111156135d8576135d86136a4565b612ada565b6135ea84848460016134f1565b8086048211156135fc576135fc6136a4565b02949350505050565b600062ffffff808316818516818304811182151516156135fc576135fc6136a4565b6000816000190483118215151615613641576136416136a4565b500290565b600082821015613658576136586136a4565b500390565b60005b83811015613678578181015183820152602001613660565b838111156124f35750506000910152565b600060001982141561369d5761369d6136a4565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611c6157600080fdfea26469706673582212208c4df450f51114768b48e466bb253db51654d2d9b085dcf4c5b24c730c23016464736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimCollateral(address[],uint256[],uint256[])": {
        "details": "claim collateral on rentals that are past their due date"
      },
      "lend(address[],uint256[],uint16[],bytes4[],bytes4[],uint8[])": {
        "details": "lend will send your NFT to ReNft contract, it acts as an escrow contract between the lender and the renter"
      },
      "returnIt(address[],uint256[],uint256[])": {
        "details": "renters call this to return the rented NFT before the deadline. If they fail to do so, they will lose the posted collateral"
      },
      "stopLending(address[],uint256[],uint256[])": {
        "details": "stop lending releases the NFT from our escrow and sends it back to you"
      },
      "supportsInterface(bytes4)": {
        "details": "supports the following interfaces: IERC721Receiver, IERC1155Receiver"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "rent(address[],uint256[],uint256[],uint16[])": {
        "notice": "domain:  any set of non-repeating NFTs (if repeating, you will incur unnecessary cost)  any set of sorted in ascending order, respective tokenIds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "src/ReNFT.sol:ReNFT",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3643,
        "contract": "src/ReNFT.sol:ReNFT",
        "label": "resolver",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IResolver)5866"
      },
      {
        "astId": 3645,
        "contract": "src/ReNFT.sol:ReNFT",
        "label": "admin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3647,
        "contract": "src/ReNFT.sol:ReNFT",
        "label": "beneficiary",
        "offset": 0,
        "slot": "3",
        "type": "t_address_payable"
      },
      {
        "astId": 3650,
        "contract": "src/ReNFT.sol:ReNFT",
        "label": "lendingId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3653,
        "contract": "src/ReNFT.sol:ReNFT",
        "label": "rentFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3695,
        "contract": "src/ReNFT.sol:ReNFT",
        "label": "lendingRenting",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(LendingRenting)3690_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IResolver)5866": {
        "encoding": "inplace",
        "label": "contract IResolver",
        "numberOfBytes": "20"
      },
      "t_enum(PaymentToken)5849": {
        "encoding": "inplace",
        "label": "enum IResolver.PaymentToken",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(LendingRenting)3690_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ReNFT.LendingRenting)",
        "numberOfBytes": "32",
        "value": "t_struct(LendingRenting)3690_storage"
      },
      "t_struct(Lending)3676_storage": {
        "encoding": "inplace",
        "label": "struct ReNFT.Lending",
        "members": [
          {
            "astId": 3666,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "lenderAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 3668,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "maxRentDuration",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 3670,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "dailyRentPrice",
            "offset": 22,
            "slot": "0",
            "type": "t_bytes4"
          },
          {
            "astId": 3672,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "nftPrice",
            "offset": 26,
            "slot": "0",
            "type": "t_bytes4"
          },
          {
            "astId": 3675,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "paymentToken",
            "offset": 30,
            "slot": "0",
            "type": "t_enum(PaymentToken)5849"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(LendingRenting)3690_storage": {
        "encoding": "inplace",
        "label": "struct ReNFT.LendingRenting",
        "members": [
          {
            "astId": 3686,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "lending",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Lending)3676_storage"
          },
          {
            "astId": 3689,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "renting",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Renting)3683_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Renting)3683_storage": {
        "encoding": "inplace",
        "label": "struct ReNFT.Renting",
        "members": [
          {
            "astId": 3678,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "renterAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 3680,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "rentDuration",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 3682,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "rentedAt",
            "offset": 22,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
