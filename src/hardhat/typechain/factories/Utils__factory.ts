/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { Utils } from "../Utils";

export class Utils__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Utils> {
    return super.deploy(overrides || {}) as Promise<Utils>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Utils {
    return super.attach(address) as Utils;
  }
  connect(signer: Signer): Utils__factory {
    return super.connect(signer) as Utils__factory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Utils {
    return new Contract(address, _abi, signerOrProvider) as Utils;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_price",
        type: "bytes4",
      },
      {
        internalType: "uint256",
        name: "_scale",
        type: "uint256",
      },
    ],
    name: "unpackPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610269806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80637ff0f20e14610030575b600080fd5b61004361003e366004610138565b610059565b60405161005091906101bd565b60405180910390f35b600061006583836100e8565b60f083901c61ffff60e085901c166000610081612710866101de565b905061270f8361ffff1611156100975761270f92505b61270f8261ffff1611156100ab5761270f91505b60006100bb8661ffff86166101fe565b905060006100cd8361ffff86166101fe565b905060006100db82846101c6565b9998505050505050505050565b60e082901c6101125760405162461bcd60e51b815260040161010990610196565b60405180910390fd5b6127108110156101345760405162461bcd60e51b81526004016101099061016f565b5050565b6000806040838503121561014a578182fd5b82356001600160e01b031981168114610161578283fd5b946020939093013593505050565b6020808252600d908201526c696e76616c6964207363616c6560981b604082015260600190565b6020808252600d908201526c696e76616c696420707269636560981b604082015260600190565b90815260200190565b600082198211156101d9576101d961021d565b500190565b6000826101f957634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156102185761021861021d565b500290565b634e487b7160e01b600052601160045260246000fdfea26469706673582212204db0a5a6cd5693243a27c7441f95528c10a038880baa4cfd2b850d805647f4ce64736f6c63430008000033";
