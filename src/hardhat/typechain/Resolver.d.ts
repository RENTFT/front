/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ResolverInterface extends ethers.utils.Interface {
  functions: {
    "getPaymentToken(uint8)": FunctionFragment;
    "setPaymentToken(uint8,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getPaymentToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentToken",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentToken",
    data: BytesLike
  ): Result;

  events: {};
}

export class Resolver extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: ResolverInterface;

  functions: {
    getPaymentToken(
      _pt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getPaymentToken(uint8)"(
      _pt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setPaymentToken(
      _pt: BigNumberish,
      _v: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPaymentToken(uint8,address)"(
      _pt: BigNumberish,
      _v: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getPaymentToken(
    _pt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPaymentToken(uint8)"(
    _pt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  setPaymentToken(
    _pt: BigNumberish,
    _v: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPaymentToken(uint8,address)"(
    _pt: BigNumberish,
    _v: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getPaymentToken(
      _pt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPaymentToken(uint8)"(
      _pt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setPaymentToken(
      _pt: BigNumberish,
      _v: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPaymentToken(uint8,address)"(
      _pt: BigNumberish,
      _v: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getPaymentToken(
      _pt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPaymentToken(uint8)"(
      _pt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPaymentToken(
      _pt: BigNumberish,
      _v: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPaymentToken(uint8,address)"(
      _pt: BigNumberish,
      _v: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPaymentToken(
      _pt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPaymentToken(uint8)"(
      _pt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPaymentToken(
      _pt: BigNumberish,
      _v: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPaymentToken(uint8,address)"(
      _pt: BigNumberish,
      _v: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
